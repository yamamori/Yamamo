package every.kaieda;

public class kuku {

	/**
	 * 素晴らしいです！完璧ですね。
	 * ２重ループ、分岐はマスターですね。
	 * 更に、メソッドまで使いこなしてますね！
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub

		for (int i = 1; i < 10; i++) {
			kukku(i);
		}

	}

	private static void kukku(int i) {
		/**
		 * 「i」のValdation（入力されてきた値の整合性チェック）を行っているのは、秀逸ですね！
		 * とても素晴らしいと思います。
		 * */
		/** 
		 * おまけ
		 * この様に書いてValidationを行うこともできます。
		 * メリットとしては、
		 * １．以降の処理を全く行わないことが保障される。
		 * ２．ネスト構造（{}のブロックの中に、{}のブロックを書いていく構造）を１つ減らせる。
		 * 少し、プロっぽい、やり方ですね。
		if(i < 1){
			return;
		}
		*/
		if (i > 0) {
			
			/**
			 * 今回の目的は、その名も、九九でしたので、
			 * for (int j = 1; j <= 9; j++) {
			 * の様に、９という数字を使った方が、可読性（読みやすさ）は高そうですね。
			 * 
			 * for (int j = 0; j < 9; j++) : ９回のループ
			 * for (int j = 1; j <= 9; j++) : ９回のループ
			 * 
			 * 上記の様に、
			 * 0から始まったら、「<」
			 * 1から始まったら、「<=」
			 * とすると、条件の数値（この場合、９）が、ループ回数になります。
			 * 
			 * ※実は、これが結構ポイントだったりします。配列やリストで良く使います。
			 * */
			for (int j = 1; j < 10; j++) {
				if ((i * j) < 10) {
					System.out.print("  " + (i * j));
				} else {
					System.out.print(" " + (i * j));
				}
			}
			System.out.println();
		}
	}// メソッドの勉強しながら作ったのでメソッドがコメントアウトしてあります･･･
}
